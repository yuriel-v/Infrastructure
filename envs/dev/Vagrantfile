"""
Vagrantfile for development environment (DEV).
Networks:
  - 172.16.0.0/24 - DEV
  - 172.16.1.0/24 - PRD
  - 172.21.0.0/24 - LAN Bridge
  - 172.30.0.0/16 - Mirror NAT (default maintenance net)
Boxes:
  - yurielnet/t1_dev_ubuntu - Ubuntu 20.04 LTS (Focal Fossa)
  - yurielnet/t2_dev_centos - CentOS 8 Stream
  - yurielnet/t3_dev_mint - Linux Mint 20.02 (Uma)
Uses the plugin 'vmware-libvirt'.
GitHub: https://github.com/vagrant-libvirt/vagrant-libvirt
Author: It's a me, Leonardo 'Yuriel' Valim.
MIT licensed => Do what you want, I wash my hands. Don't blame me for what happens.
Do put that license note on substantial parts of the code though.
Yes, that LICENSE.md thing on the repo root.
"""


# Insecure Vagrant PK import script for creating new templates
$wget_insecure_key = <<-SCRIPT
wget -O /home/vagrant/.ssh/vagrant.pub https://raw.githubusercontent.com/hashicorp/vagrant/master/keys/vagrant.pub > /dev/null 2>&1
cat /home/vagrant/.ssh/vagrant.pub > /home/vagrant/.ssh/authorized_keys
SCRIPT


# Utility functions
def decide_template(guest_os)
  if guest_os == "ubuntu-server"
    return "yurielnet/t1_dev_ubuntu"

  elsif guest_os == "centos-server"
    return "yurielnet/t2_dev_centos"

  elsif guest_os == "linux-desktop"
    return "yurielnet/t3_dev_mint"

  else
    return nil
  end
end


def decide_network(gateways)
  if gateways.include? "172.16.0.1"
    return "development"
  elsif gateways.include? "172.16.1.1"
    return "production"
  else
    return nil
  end
end


# Import the actual configs
require 'yaml'

lab = YAML.load_file('lab.yml')
general_purpose = YAML.load_file('general.yml')
dns = YAML.load_file('dns.yml')
gaming = YAML.load_file('gaming.yml')
web = YAML.load_file('web.yml')


# Actually run Vagrant
Vagrant.configure('2') do |config|
  environment = [lab, general_purpose, dns, gaming, web]

  environment.each do |category|
    category.each do |vm|
      vm.each do |vm_name, cfg|
        config.vm.synced_folder('.', '/vagrant', disabled: true)
        config.ssh.insert_key = true

        config.vm.define vm_name do |machine|
          machine.vm.hostname = vm_name
          machine.vm.box = decide_template(cfg["guest_os"])

          cfg["networks"].each do |gw, ip_addr|
              machine.vm.network :private_network,
                :ip => ip_addr,
                :libvirt__network_name => gw == "172.16.0.1" ? "dev" : "prd",
                :libvirt__netmask => '255.255.255.0',
                :gateway => gw,
                :libvirt__guest_ipv6 => "no",
                :libvirt__domain_mane => "yuriel.net",
                :autostart => true
          end

          machine.vm.provision 'shell', path: './shell/ansible.sh' if cfg["extra_vars"] == "ansible"
          machine.vm.provision 'shell', path: './shell/self-ansible.sh', args: "dev #{cfg['type']} \"{#{cfg['global_vars']}#{', ' + cfg['extra_vars'] if !(cfg['extra_vars'].nil? || cfg['extra_vars'] == 'ansible' )}}\""

          machine.vm.provider :libvirt do |p|
            p.driver = "kvm"
            p.title = "yurielnet"
            p.default_prefix = ""
            p.storage_pool_name = decide_network(cfg['networks'].keys)

            p.memory = cfg['memory']
            p.cpus = cfg['vcpus']
            p.cpu_model = "kvm64"
            p.machine_virtual_size = 50

            p.graphics_type = "vnc"
            p.graphics_ip = "0.0.0.0"
            p.graphics_autoport = true
            p.keymap = "pt-br"

            p.management_network_name = "default"
            p.management_network_address = "172.30.0.0/16"
            p.management_network_mode = "nat"
            p.management_network_guest_ipv6 = false

            p.watchdog :model => 'i6300esb', :action => 'reset'
          end
        end
      end
    end
  end
end
      
